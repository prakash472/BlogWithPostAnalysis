[{"C:\\Users\\prakash472\\Desktop\\frontend\\src\\index.js":"1","C:\\Users\\prakash472\\Desktop\\frontend\\src\\App.js":"2","C:\\Users\\prakash472\\Desktop\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\prakash472\\Desktop\\frontend\\src\\PageRenderer.js":"4","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\contact-us.js":"5","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\home.js":"6","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\index.js":"7","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\Navbar.js":"8","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\MasonaryPost.js":"9","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\PostMasonary.js":"10","C:\\Users\\prakash472\\Desktop\\frontend\\src\\assets\\mocks\\trending.js":"11","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\styles.js":"12","C:\\Users\\prakash472\\Desktop\\frontend\\src\\assets\\mocks\\featured.js":"13","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\PostGrid.js":"14","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\TagRow.js":"15","C:\\Users\\prakash472\\Desktop\\frontend\\src\\axios.js":"16","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\register.js":"17","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\login.js":"18","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\logout.js":"19","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\useFetch.js":"20","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\search.js":"21","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\create-post.js":"22","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\delete-post.js":"23","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\edit-post.js":"24","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\view-post.js":"25","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\posts.js":"26","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\CheckAuthentication.js":"27","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\checkAuthentication.js":"28","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\filteredPosts.js":"29","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\create-post copy.js":"30"},{"size":593,"mtime":1607785772959,"results":"31","hashOfConfig":"32"},{"size":1223,"mtime":1609227064319,"results":"33","hashOfConfig":"32"},{"size":362,"mtime":499162500000,"results":"34","hashOfConfig":"32"},{"size":613,"mtime":1607776144148,"results":"35","hashOfConfig":"32"},{"size":1527,"mtime":1609755437103,"results":"36","hashOfConfig":"32"},{"size":6396,"mtime":1609679813138,"results":"37","hashOfConfig":"32"},{"size":214,"mtime":1609231456160,"results":"38","hashOfConfig":"32"},{"size":3464,"mtime":1609756058438,"results":"39","hashOfConfig":"32"},{"size":1153,"mtime":1609678850789,"results":"40","hashOfConfig":"32"},{"size":525,"mtime":1608914401252,"results":"41","hashOfConfig":"32"},{"size":2838,"mtime":1609677590579,"results":"42","hashOfConfig":"32"},{"size":280,"mtime":1609006693140,"results":"43","hashOfConfig":"32"},{"size":1781,"mtime":1609677552958,"results":"44","hashOfConfig":"32"},{"size":3071,"mtime":1609748456179,"results":"45","hashOfConfig":"32"},{"size":629,"mtime":1609006512097,"results":"46","hashOfConfig":"32"},{"size":2650,"mtime":1608228025305,"results":"47","hashOfConfig":"32"},{"size":3397,"mtime":1608383102038,"results":"48","hashOfConfig":"32"},{"size":3008,"mtime":1608740848624,"results":"49","hashOfConfig":"32"},{"size":602,"mtime":1608381903497,"results":"50","hashOfConfig":"32"},{"size":793,"mtime":1608917014590,"results":"51","hashOfConfig":"32"},{"size":610,"mtime":1609676235962,"results":"52","hashOfConfig":"32"},{"size":9448,"mtime":1609755376392,"results":"53","hashOfConfig":"32"},{"size":1681,"mtime":1608907743827,"results":"54","hashOfConfig":"32"},{"size":9879,"mtime":1609755407769,"results":"55","hashOfConfig":"32"},{"size":1705,"mtime":1609687357617,"results":"56","hashOfConfig":"32"},{"size":1791,"mtime":1609687479900,"results":"57","hashOfConfig":"32"},{"size":353,"mtime":1609231574187,"results":"58","hashOfConfig":"32"},{"size":353,"mtime":1609231574187,"results":"59","hashOfConfig":"32"},{"size":0,"mtime":1609567254101,"results":"60","hashOfConfig":"32"},{"size":7885,"mtime":1609755337537,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"14w7i2e",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"64"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"64"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"64"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"64"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"64"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"64"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"130"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"64"},"C:\\Users\\prakash472\\Desktop\\frontend\\src\\index.js",[],["136","137"],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\App.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\PageRenderer.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\contact-us.js",["138","139","140","141","142","143","144","145"],"import React, { useState, useEffect } from \"react\";\r\nimport trending from \"./../assets/mocks/trending\";\r\nimport featured from \"./../assets/mocks/featured\";\r\nimport { MasonaryPost, PostMasonary, PostGrid } from \"../components/common\";\r\nimport { Input } from \"antd\";\r\nimport { AudioOutlined } from \"@ant-design/icons\";\r\nimport axiosInstance from \"../axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n//const { Search } = Input;\r\n\r\nconst ContactUS = () => {\r\n  let history = useHistory();\r\n  const [searchPosts, setSearchPosts] = useState([]);\r\n  //const { searchTerm } = useParams();\r\n  console.log(window.location.search);\r\n\r\n  useEffect(() => {\r\n    axiosInstance.get(\"search/\" + window.location.search).then((res) => {\r\n      const allPosts = res.data;\r\n      console.log(\"Search Posts\" + res.data);\r\n      setSearchPosts(allPosts);\r\n    });\r\n  }, [window.location.search]);\r\n  return (\r\n    <main className=\"home\">\r\n      {searchPosts.length > 0 ? (\r\n        <section className=\"bg-white\">\r\n          <section className=\"container\">\r\n            <div className=\"row\">\r\n              <h2>Related Posts</h2>\r\n              <PostGrid posts={searchPosts} />\r\n            </div>\r\n          </section>\r\n        </section>\r\n      ) : (\r\n        <section className=\"bg-white\">\r\n          <section className=\"container\">\r\n            <div className=\"row\">\r\n              <h2>No Matching Posts Found</h2>\r\n            </div>\r\n          </section>\r\n        </section>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\nexport default ContactUS;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\home.js",["146","147"],"import React, { useState, useEffect } from \"react\";\r\nimport trending from \"./../assets/mocks/trending\";\r\nimport featured from \"./../assets/mocks/featured\";\r\nimport { MasonaryPost, PostMasonary, PostGrid } from \"../components/common\";\r\nimport { useFetch } from \"./../components/common/useFetch\";\r\nimport { Switch } from \"antd\";\r\nimport axiosInstance from \"../axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  let history = useHistory();\r\n  const [isFilterChecked, setIsFilterChecked] = useState(false);\r\n  const [filteredPosts, setFilteredPosts] = useState([]);\r\n  const trendingPostsURL = \"http://localhost:8000/api/recent/posts/\";\r\n  const { isLoading, isError, trendingPosts } = useFetch(trendingPostsURL);\r\n  useEffect(() => {\r\n    axiosInstance.get(\"recent/posts/filtered\").then((res) => {\r\n      setFilteredPosts(res.data);\r\n      console.log(filteredPosts);\r\n    });\r\n  }, []);\r\n  console.log(trendingPosts);\r\n  if (isError) {\r\n    return <h2>Error....</h2>;\r\n  }\r\n  if (isLoading) {\r\n    return <h2>Loading....</h2>;\r\n  }\r\n  const trendingConfig = {\r\n    1: {\r\n      gridArea: \"1 / 2 / 3 /3\",\r\n    },\r\n  };\r\n  const featuredConfig = {\r\n    0: {\r\n      gridArea: \"1/1/2/3\",\r\n      height: \"300px\",\r\n    },\r\n    1: {\r\n      height: \"300px\",\r\n    },\r\n    3: {\r\n      height: \"630px\",\r\n      width: \"630px\",\r\n      marginLeft: \"30px\",\r\n    },\r\n  };\r\n  const recentPosts = trendingPosts;\r\n  const featuredPosts = featured;\r\n  console.log(\"First Featured Possstssss\");\r\n  console.log(featuredPosts);\r\n  console.log(\"recentPosts\" + recentPosts);\r\n  const lastFeatured = {\r\n    id: 20,\r\n    title: \"THought to be above average\",\r\n    content:\r\n      \"I like the way AI works. I am fascinated by its usecase. I would like to move forward with it.\",\r\n    date_posted: \"2021-01-03T12:35:43.806941Z\",\r\n    excerpt: \"above average post\",\r\n    slug: \"thought-to-be-above-average\",\r\n    review_positive: 0.9999998211860657,\r\n    image: \"/media/posts/rss.JPG\",\r\n    author: 1,\r\n    categories: [\r\n      {\r\n        id: 4,\r\n        name: \"Cyber-Security\",\r\n      },\r\n      {\r\n        id: 5,\r\n        name: \"AI\",\r\n      },\r\n    ],\r\n    style: {\r\n      height: \"630px\",\r\n      width: \"630px\",\r\n      marginLeft: \"30px\",\r\n    },\r\n  };\r\n\r\n  const mergeStyles = (posts, config) => {\r\n    posts.forEach((post, index) => {\r\n      post.style = config[index];\r\n    });\r\n  };\r\n\r\n  mergeStyles(trendingPosts, trendingConfig);\r\n  mergeStyles(featuredPosts, featuredConfig);\r\n  mergeStyles(trending, trendingConfig);\r\n\r\n  const handleSwitch = () => {\r\n    setIsFilterChecked(!isFilterChecked);\r\n    if (isFilterChecked) {\r\n      window.location.reload();\r\n    }\r\n  };\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div className=\"row\">\r\n          <section className=\"featured-posts-container\">\r\n            <PostMasonary\r\n              posts={featuredPosts}\r\n              columns={2}\r\n              test={1}\r\n              tagsOnTop={true}\r\n            />\r\n            <MasonaryPost post={lastFeatured} tagsOnTop={true} />\r\n          </section>\r\n        </div>\r\n      </section>\r\n      {isFilterChecked ? (\r\n        <section className=\"bg-white\">\r\n          <section className=\"container\">\r\n            <div className=\"row\">\r\n              <span\r\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n              >\r\n                <h2>Recent Posts</h2>\r\n                <Switch\r\n                  checkedChildren=\"Filter\"\r\n                  unCheckedChildren=\"No-Filter\"\r\n                  defaultChecked\r\n                  onClick={handleSwitch}\r\n                />\r\n              </span>\r\n              <PostGrid posts={filteredPosts} />\r\n            </div>\r\n          </section>\r\n        </section>\r\n      ) : (\r\n        <section className=\"bg-white\">\r\n          <section className=\"container\">\r\n            <div className=\"row\">\r\n              <span\r\n                style={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n              >\r\n                <h2>Recent Posts</h2>\r\n                <Switch\r\n                  checkedChildren=\"Filter\"\r\n                  unCheckedChildren=\"No-Filter\"\r\n                  onClick={handleSwitch}\r\n                />\r\n              </span>\r\n              <PostGrid posts={recentPosts} />\r\n            </div>\r\n          </section>\r\n        </section>\r\n      )}\r\n      <section className=\"container\">\r\n        <div className=\"row\">\r\n          <PostMasonary posts={trending} columns={3} test={2} />\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\nexport default Home;\r\n\r\n/* const trendingConfig = {\r\n  1: {\r\n    gridArea: \"1 / 2 / 3 /3\",\r\n  },\r\n};\r\nconst featuredConfig = {\r\n  0: {\r\n    gridArea: \"1/1/2/3\",\r\n    height: \"300px\",\r\n  },\r\n  1: {\r\n    height: \"300px\",\r\n  },\r\n  3: {\r\n    height: \"630px\",\r\n    width: \"630px\",\r\n    marginLeft: \"30px\",\r\n  },\r\n};\r\nconst mergeStyles = (posts, config) => {\r\n  posts.forEach((post, index) => {\r\n    post.style = config[index];\r\n    post.author = \"Prakash Parajuli\";\r\n    post.description =\r\n      \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. \";\r\n  });\r\n};\r\nconst recentPosts = [...trending, ...featured, ...trending];\r\nconsole.log(\"recentPosts\" + recentPosts);\r\n\r\nmergeStyles(trending, trendingConfig);\r\nmergeStyles(featured, featuredConfig);\r\n\r\nconst lastFeatured = featured.pop();\r\n\r\nconst Home = () => {\r\n  console.log(\"Featured\" + featured);\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div className=\"row\">\r\n          <section className=\"featured-posts-container\">\r\n            <PostMasonary\r\n              posts={featured}\r\n              columns={2}\r\n              test={1}\r\n              tagsOnTop={true}\r\n            />\r\n            <MasonaryPost post={lastFeatured} tagsOnTop={true} />\r\n          </section>\r\n        </div>\r\n      </section>\r\n      <section className=\"bg-white\">\r\n        <section className=\"container\">\r\n          <div className=\"row\">\r\n            <h2>Recent Posts</h2>\r\n            <PostGrid posts={recentPosts} />\r\n          </div>\r\n        </section>\r\n      </section>\r\n      <section className=\"container\">\r\n        <div className=\"row\">\r\n          <PostMasonary posts={trending} columns={3} test={2} />\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n */\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\index.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\Navbar.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\MasonaryPost.js",["148"],"import React from \"react\";\r\nimport { Content } from \"antd/lib/layout/layout\";\r\nimport { TagRow } from \"./\";\r\n\r\nconst MasonaryPost = (props) => {\r\n  const { post, tagsOnTop } = props;\r\n  const windowWidth = window.innerWidth;\r\n  console.log(\"In MAsonay Post\");\r\n  console.log(post);\r\n\r\n  const imageBackground = {\r\n    /*     backgroundImage: `url(\"${\r\n      require(`../../assets/images/${post.image}`).default\r\n    }\")`, */\r\n    backgroundImage: `url(\"http://localhost:8000${post.image}\")`,\r\n  };\r\n\r\n  const style =\r\n    windowWidth > 900 ? { ...imageBackground, ...post.style } : imageBackground;\r\n  console.log(post);\r\n  return (\r\n    <a className=\"masonary-post overlay\" style={style} href={post.link}>\r\n      <div\r\n        className=\"image-text\"\r\n        style={{ justifyContent: tagsOnTop ? \"space-between\" : \"flex-end\" }}\r\n      >\r\n        <TagRow tags={post.categories}></TagRow>\r\n        <div>\r\n          <h2 className=\"image-title\">{post.title}</h2>\r\n          <span className=\"image-date\">{post.date}</span>\r\n        </div>\r\n      </div>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default MasonaryPost;\r\n\r\n// <img src={backImage} alt={post.title}></img>\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\PostMasonary.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\assets\\mocks\\trending.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\styles.js",[],["149","150"],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\assets\\mocks\\featured.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\PostGrid.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\TagRow.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\axios.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\register.js",["151"],"import React from \"react\";\r\nimport axiosInstance from \"../axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport { MailTwoTone } from \"@ant-design/icons\";\r\nconst Register = () => {\r\n  const history = useHistory();\r\n  const handleSubmit = (values) => {\r\n    // e.preventDefault();\r\n    console.log(values);\r\n    axiosInstance\r\n      .post(\"user/create/\", {\r\n        email: values.email,\r\n        username: values.username,\r\n        password: values.password,\r\n      })\r\n      .then((res) => {\r\n        history.push(\"/login\");\r\n        console.log(res);\r\n        console.log(res.data);\r\n      });\r\n  };\r\n  console.log(\"In Register Page\");\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            paddingTop: \"10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Form\r\n            style={{\r\n              height: \"300px\",\r\n            }}\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{ email: \"\", username: \"\", password: \"\" }}\r\n            onFinish={handleSubmit}\r\n          >\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your Email!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<MailTwoTone className=\"site-form-item-icon\" />}\r\n                placeholder=\"Email\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"username\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your Username!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n                placeholder=\"username\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your Password!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                <Checkbox>Remember me</Checkbox>\r\n              </Form.Item>\r\n              <a className=\"login-form-forgot\" href=\"#\">\r\n                Forgot password\r\n              </a>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-form-button\"\r\n              >\r\n                Sign Up\r\n              </Button>\r\n              Or <Link to=\"/login\">Already have an Account!</Link>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Register;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\login.js",["152"],"import React from \"react\";\r\nimport axiosInstance from \"../axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport { LockOutlined } from \"@ant-design/icons\";\r\nimport { MailTwoTone } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nconst Login = () => {\r\n  const history = useHistory();\r\n  const handleSubmit = (values) => {\r\n    console.log(values);\r\n    axiosInstance\r\n      .post(\"token/\", {\r\n        email: values.email,\r\n        password: values.password,\r\n      })\r\n      .then((res) => {\r\n        localStorage.setItem(\"access_token\", res.data.access);\r\n        localStorage.setItem(\"refresh_token\", res.data.refresh);\r\n        axiosInstance.defaults.headers[\"Authorization\"] =\r\n          \"JWT\" + localStorage.getItem(\"access_token\");\r\n        history.push(\"/\");\r\n      });\r\n  };\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            paddingTop: \"10px\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          <Form\r\n            style={{\r\n              height: \"300px\",\r\n            }}\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{ email: \"\", password: \"\" }}\r\n            onFinish={handleSubmit}\r\n          >\r\n            <Form.Item\r\n              name=\"email\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your Email!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<MailTwoTone className=\"site-form-item-icon\" />}\r\n                placeholder=\"Email\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"password\"\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                  message: \"Please input your Password!\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input\r\n                prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n                <Checkbox>Remember me</Checkbox>\r\n              </Form.Item>\r\n              <a className=\"login-form-forgot\" href=\"#\">\r\n                Forgot password\r\n              </a>\r\n            </Form.Item>\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                className=\"login-form-button\"\r\n              >\r\n                Login\r\n              </Button>\r\n              Or <Link to=\"/register\">Create an Account!</Link>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\logout.js",["153","154"],"import React, { useEffect } from \"react\";\r\nimport axiosInstance from \"../axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst Logout = () => {\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    const response = axiosInstance.post(\"user/logout/blacklist/\", {\r\n      refresh_token: localStorage.getItem(\"refresh_token\"),\r\n    });\r\n    localStorage.removeItem(\"access_token\");\r\n    localStorage.removeItem(\"refresh_token\");\r\n    axiosInstance.defaults.headers[\"Authorization\"] = null;\r\n    history.push(\"/login\");\r\n  }, []);\r\n  return <div>Logout</div>;\r\n};\r\n\r\nexport default Logout;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\useFetch.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\search.js",["155","156","157","158"],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\create-post.js",["159","160","161","162","163","164","165","166","167","168","169","170","171","172","173"],"import {\r\n  Form,\r\n  Input,\r\n  InputNumber,\r\n  Button,\r\n  DatePicker,\r\n  Select,\r\n  Upload,\r\n} from \"antd\";\r\nimport {\r\n  MinusCircleOutlined,\r\n  UploadOutlined,\r\n  PlusOutlined,\r\n} from \"@ant-design/icons\";\r\nimport axios from \"axios\";\r\nimport { useState, useEffect } from \"react\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axiosInstance from \"../../axios\";\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\nconst normFile = (e) => {\r\n  console.log(\"Upload event:\", e);\r\n\r\n  if (Array.isArray(e)) {\r\n    return e;\r\n  }\r\n\r\n  return e && e.fileList;\r\n};\r\nconst validateMessages = {\r\n  required: \"${label} is required!\",\r\n  types: {\r\n    email: \"${label} is not a valid email!\",\r\n    number: \"${label} is not a valid number!\",\r\n  },\r\n  number: {\r\n    range: \"${label} must be between ${min} and ${max}\",\r\n  },\r\n};\r\n\r\nconst checkAuthentication = () => {\r\n  var token = localStorage.getItem(\"access_token\");\r\n  if (token) {\r\n    var decoded_token = jwt_decode(token);\r\n    console.log(\"decoded-token\" + decoded_token.user_id);\r\n    const userId = decoded_token.user_id;\r\n    return userId;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst CreatePost = () => {\r\n  const authenticatedUser = checkAuthentication();\r\n  const userId = authenticatedUser;\r\n  const [totalCategory, setTotalCategory] = useState({});\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    axiosInstance.get(\"categories/\").then((res) => {\r\n      setTotalCategory(res.data);\r\n    });\r\n  }, []);\r\n\r\n  function slugify(string) {\r\n    const a =\r\n      \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\r\n    const b =\r\n      \"aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\r\n    const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\r\n\r\n    return string\r\n      .toString()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n      .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\r\n      .replace(/&/g, \"-and-\") // Replace & with 'and'\r\n      .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters\r\n      .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n      .replace(/^-+/, \"\") // Trim - from start of text\r\n      .replace(/-+$/, \"\"); // Trim - from end of text\r\n  }\r\n  const [postImage, setPostImage] = useState(null);\r\n  const ids = [1, 2, 3];\r\n  const [addCategory, setaddCategory] = useState(false);\r\n  const reviewURL = \"http://127.0.0.1:5000/predict_review\";\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\":\r\n        \"multipart/form-data; boundary=----WebKitFormBoundaryqTqJIxvkWFYqvP5s\",\r\n    },\r\n  };\r\n  const postURL = \"http://127.0.0.1:8000/api/customuser/create/\";\r\n  var analysedreview = {};\r\n\r\n  const handleFileUpload = (e) => {\r\n    if ([e.target.name] == \"image\") {\r\n      setPostImage({\r\n        image: e.target.files,\r\n      });\r\n      console.log(e.target.files);\r\n    }\r\n  };\r\n  const handleSubmit = (values) => {\r\n    console.log(postImage.image[0]);\r\n    const initialTitle = values.title.trim();\r\n    const slugifyTitle = slugify(initialTitle);\r\n    axiosInstance.post(reviewURL, { review: values.content }).then((res) => {\r\n      analysedreview = res.data;\r\n      console.log(analysedreview);\r\n    });\r\n    values.slug = slugifyTitle;\r\n    values.author = userId;\r\n    if (values.date_posted === null) {\r\n      values.date_posted = \"\";\r\n    }\r\n    let formData = new FormData();\r\n    formData.append(\"title\", values.title);\r\n    formData.append(\"slug\", values.slug);\r\n    formData.append(\"author\", values.author);\r\n    formData.append(\"excerpt\", values.excerpt);\r\n    formData.append(\"content\", values.content);\r\n    values.categories.forEach((category) => {\r\n      formData.append(\"categories\", category);\r\n    });\r\n    formData.append(\"review_positive\", analysedreview.predictions[0]);\r\n    formData.append(\"image\", postImage.image[0]);\r\n    axios\r\n      .post(postURL, formData, config)\r\n      .then((res) => {\r\n        console.log(\"Inside post request\");\r\n        console.log(res);\r\n        //  history.push(\"/home/\");\r\n      })\r\n      .catch((err) => console.log(err));\r\n    console.log(\"After\");\r\n    console.log(values);\r\n  };\r\n  const add = () => {\r\n    setaddCategory(true);\r\n  };\r\n\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            paddingTop: \"10px\",\r\n          }}\r\n        >\r\n          <h2>Create Post</h2>\r\n          <Form\r\n            {...layout}\r\n            name=\"nest-messages\"\r\n            onFinish={handleSubmit}\r\n            validateMessages={validateMessages}\r\n            initialValues={{\r\n              title: \"\",\r\n              content: \"\",\r\n              date_posted: \"\",\r\n              excerpt: \"\",\r\n              slug: \"\",\r\n              review_positive: null,\r\n              image: null,\r\n              author: null,\r\n            }}\r\n          >\r\n            <Form.Item\r\n              name={[\"title\"]}\r\n              label=\"Title\"\r\n              rules={[\r\n                {\r\n                  // required: true,\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name={[\"excerpt\"]}\r\n              label=\"Excerpt\"\r\n              rules={[\r\n                {\r\n                  // type: \"email\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name={[\"date_posted\"]} label=\"Date\">\r\n              <DatePicker />\r\n            </Form.Item>\r\n            <Form.Item\r\n              hidden\r\n              name={[\"review_positive\"]}\r\n              label=\"Review_Positive\"\r\n              rules={[\r\n                {\r\n                  type: \"number\",\r\n                },\r\n              ]}\r\n            >\r\n              <InputNumber disabled />\r\n            </Form.Item>\r\n            <Form.Item label=\"PostImage\"></Form.Item>\r\n            <input\r\n              accept=\"image/*\"\r\n              id=\"post-image\"\r\n              onChange={handleFileUpload}\r\n              name=\"image\"\r\n              type=\"file\"\r\n              required\r\n              style={{ marginLeft: \"300px\" }}\r\n            />\r\n            <Form.Item name={[\"slug\"]} label=\"Slug\" hidden>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name={[\"author\"]} label=\"Author\" hidden>\r\n              <Input disabled />\r\n            </Form.Item>\r\n            <Form.Item name={[\"content\"]} label=\"Content\">\r\n              <Input.TextArea />\r\n            </Form.Item>\r\n            <Form.List\r\n              name=\"categories\"\r\n              rules={[\r\n                {\r\n                  validator: async (_, names) => {\r\n                    if (!names || names.length < 1) {\r\n                      return Promise.reject(\r\n                        new Error(\"At least 1 category needed\")\r\n                      );\r\n                    }\r\n                  },\r\n                },\r\n              ]}\r\n            >\r\n              {(fields, { add, remove }, { errors }) => (\r\n                <>\r\n                  {fields.map((field, index) => (\r\n                    <Form.Item\r\n                      label=\"Categories\"\r\n                      required={false}\r\n                      key={field.key}\r\n                    >\r\n                      <Form.Item\r\n                        wrapperCol={{ ...layout.wrapperCol }}\r\n                        {...field}\r\n                        validateTrigger={[\"onChange\", \"onBlur\"]}\r\n                        noStyle\r\n                      >\r\n                        <Select>\r\n                          {totalCategory.map((category) => {\r\n                            return (\r\n                              <Select.Option value={category.id}>\r\n                                {category.name}\r\n                              </Select.Option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                      </Form.Item>\r\n                      {fields.length > 1 ? (\r\n                        <MinusCircleOutlined\r\n                          className=\"dynamic-delete-button\"\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      ) : null}\r\n                    </Form.Item>\r\n                  ))}\r\n                  {fields.length < 2 ? (\r\n                    <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        style={{ width: \"60%\" }}\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add Category\r\n                      </Button>\r\n                      <Form.ErrorList errors={errors} />\r\n                    </Form.Item>\r\n                  ) : null}\r\n                </>\r\n              )}\r\n            </Form.List>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\nexport default CreatePost;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\delete-post.js",["174"],"import React, { useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axiosInstance from \"../../axios\";\r\nimport { Modal, Button } from \"antd\";\r\n\r\nconst DeletePost = () => {\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n\r\n  const handleSubmit = () => {\r\n    setIsModalVisible(false);\r\n    axiosInstance\r\n      .delete(\"customuser/delete/posts/\" + id)\r\n      .catch(function (error) {\r\n        if (error.response) {\r\n          console.log(error.response.data);\r\n          console.log(error.response.status);\r\n          console.log(error.response.headers);\r\n        }\r\n      })\r\n      .then(function () {\r\n        /*  history.push({\r\n          pathname: \"/home/\",\r\n        }); */\r\n        //   window.location.reload();\r\n      });\r\n  };\r\n\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  const showModal = () => {\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            paddingTop: \"10px\",\r\n          }}\r\n        >\r\n          <>\r\n            <Button type=\"primary\" onClick={showModal}>\r\n              Delete\r\n            </Button>\r\n            <Modal\r\n              title=\"Basic Modal\"\r\n              visible={isModalVisible}\r\n              onOk={handleSubmit}\r\n              onCancel={handleCancel}\r\n            >\r\n              <p>Are you sure you want to delete post?</p>\r\n            </Modal>\r\n          </>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default DeletePost;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\edit-post.js",["175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"import { Form, Input, InputNumber, Button, DatePicker, Select } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { useEffect, useState } from \"react\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport axiosInstance from \"../../axios\";\r\n\r\nconst checkAuthentication = () => {\r\n  var token = localStorage.getItem(\"access_token\");\r\n  if (token) {\r\n    var decoded_token = jwt_decode(token);\r\n    console.log(\"decoded-token\" + decoded_token.user_id);\r\n    const userId = decoded_token.user_id;\r\n    return userId;\r\n  } else {\r\n    return 0;\r\n  }\r\n};\r\n\r\nconst authenticatedUser = checkAuthentication();\r\nconst userId = authenticatedUser;\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\n\r\nconst validateMessages = {\r\n  required: \"${label} is required!\",\r\n  types: {\r\n    email: \"${label} is not a valid email!\",\r\n    number: \"${label} is not a valid number!\",\r\n  },\r\n  number: {\r\n    range: \"${label} must be between ${min} and ${max}\",\r\n  },\r\n};\r\n\r\nconst EditPost = () => {\r\n  const [form] = Form.useForm();\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [formData, updateFormData] = useState({});\r\n  const [totalCategory, setTotalCategory] = useState({}); // This is for when we provide all options because in option we require all of them.\r\n  let newCategory = [];\r\n  useEffect(() => {\r\n    axiosInstance.get(\"categories/\").then((res) => {\r\n      setTotalCategory(res.data);\r\n    });\r\n    axiosInstance.get(\"customuser/posts/details/\" + id).then((res) => {\r\n      updateFormData(res.data);\r\n      const categoryObject = res.data.categories;\r\n      categoryObject.map((category) => {\r\n        const { id, name } = category;\r\n        newCategory = newCategory.concat(id); // This is for display when form loads with data\r\n      });\r\n      console.log(newCategory);\r\n      // console.log(categoryObject);\r\n      form.setFieldsValue({\r\n        title: res.data.title,\r\n        excerpt: res.data.excerpt,\r\n        content: res.data.content,\r\n        image: res.data.image,\r\n        review_positive: res.data.review_positive,\r\n        categories: newCategory,\r\n      });\r\n    });\r\n  }, []);\r\n  console.log(formData.title);\r\n\r\n  function slugify(string) {\r\n    const a =\r\n      \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\r\n    const b =\r\n      \"aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\r\n    const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\r\n\r\n    return string\r\n      .toString()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n      .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\r\n      .replace(/&/g, \"-and-\") // Replace & with 'and'\r\n      .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters\r\n      .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n      .replace(/^-+/, \"\") // Trim - from start of text\r\n      .replace(/-+$/, \"\"); // Trim - from end of text\r\n  }\r\n\r\n  const ids = [1, 2, 3];\r\n  const [postImage, setPostImage] = useState(null);\r\n  const reviewURL = \"http://127.0.0.1:5000/predict_review\";\r\n  var analysedreview = {};\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\":\r\n        \"multipart/form-data; boundary=----WebKitFormBoundaryqTqJIxvkWFYqvP5s\",\r\n    },\r\n  };\r\n  const handleFileUpload = (e) => {\r\n    if ([e.target.name] == \"image\") {\r\n      setPostImage({\r\n        image: e.target.files,\r\n      });\r\n      console.log(e.target.files);\r\n    }\r\n  };\r\n  const handleSubmit = (values) => {\r\n    const initialTitle = values.title.trim();\r\n    const slugifyTitle = slugify(initialTitle);\r\n    axiosInstance.post(reviewURL, { review: values.content }).then((res) => {\r\n      analysedreview = res.data;\r\n      console.log(analysedreview);\r\n    });\r\n    values.slug = slugifyTitle;\r\n    values.author = userId;\r\n    if (values.date_posted === null) {\r\n      values.date_posted = \"\";\r\n    }\r\n    let finalFormData = new FormData();\r\n    finalFormData.append(\"title\", values.title);\r\n    finalFormData.append(\"slug\", values.slug);\r\n    finalFormData.append(\"author\", values.author);\r\n    finalFormData.append(\"excerpt\", values.excerpt);\r\n    finalFormData.append(\"content\", values.content);\r\n    values.categories.forEach((category) => {\r\n      finalFormData.append(\"categories\", category);\r\n    });\r\n    finalFormData.append(\"review_positive\", analysedreview.predictions[0]);\r\n    if (postImage === null) {\r\n      finalFormData.append(\"image\", formData.image);\r\n    } else {\r\n      finalFormData.append(\"image\", postImage.image[0]);\r\n    }\r\n    axiosInstance\r\n      .put(`customuser/edit/posts/${id}/`, finalFormData, config)\r\n      .then((res) => {\r\n        console.log(res);\r\n        //   history.push(\"/home/\");\r\n      });\r\n\r\n    console.log(values);\r\n  };\r\n\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            paddingTop: \"10px\",\r\n          }}\r\n        >\r\n          <h2>Edit Post</h2>\r\n\r\n          <Form\r\n            {...layout}\r\n            form={form}\r\n            name=\"nest-messages\"\r\n            onFinish={handleSubmit}\r\n            validateMessages={validateMessages}\r\n            initialValues={formData}\r\n          >\r\n            {console.log(formData)}\r\n            <Form.Item\r\n              name={[\"title\"]}\r\n              label=\"Title\"\r\n              rules={[\r\n                {\r\n                  // required: true,\r\n                },\r\n              ]}\r\n            >\r\n              <Input value={5} />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name={[\"excerpt\"]}\r\n              label=\"Excerpt\"\r\n              rules={[\r\n                {\r\n                  // type: \"email\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name={[\"review_positive\"]}\r\n              label=\"Review_Positive\"\r\n              rules={[\r\n                {\r\n                  type: \"number\",\r\n                },\r\n              ]}\r\n            >\r\n              <InputNumber disabled />\r\n            </Form.Item>\r\n            <Form.Item label=\"Post Image\">\r\n              <img\r\n                src={formData.image}\r\n                style={{ height: \"30px\", width: \"30px\" }}\r\n              ></img>\r\n            </Form.Item>\r\n            <input\r\n              accept=\"image/*\"\r\n              id=\"post-image\"\r\n              name=\"image\"\r\n              type=\"file\"\r\n              onChange={handleFileUpload}\r\n              required\r\n              style={{ marginLeft: \"300px\" }}\r\n            />\r\n            <Form.Item name={[\"slug\"]} label=\"Slug\" hidden>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name={[\"author\"]} label=\"Author\" hidden>\r\n              <Input disabled />\r\n            </Form.Item>\r\n            <Form.Item name={[\"content\"]} label=\"Content\">\r\n              <Input.TextArea />\r\n            </Form.Item>\r\n            <Form.List\r\n              name=\"categories\"\r\n              rules={[\r\n                {\r\n                  validator: async (_, names) => {\r\n                    if (!names || names.length < 1) {\r\n                      return Promise.reject(\r\n                        new Error(\"At least 1 category needed\")\r\n                      );\r\n                    }\r\n                  },\r\n                },\r\n              ]}\r\n            >\r\n              {(fields, { add, remove }, { errors }) => (\r\n                <>\r\n                  {fields.map((field, index) => (\r\n                    <Form.Item\r\n                      label=\"Categories\"\r\n                      required={false}\r\n                      key={field.key}\r\n                    >\r\n                      <Form.Item\r\n                        wrapperCol={{ ...layout.wrapperCol }}\r\n                        {...field}\r\n                        validateTrigger={[\"onChange\", \"onBlur\"]}\r\n                        noStyle\r\n                      >\r\n                        <Select>\r\n                          {totalCategory.map((category) => {\r\n                            return (\r\n                              <Select.Option value={category.id}>\r\n                                {category.name}\r\n                              </Select.Option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                      </Form.Item>\r\n                      {fields.length > 1 ? (\r\n                        <MinusCircleOutlined\r\n                          className=\"dynamic-delete-button\"\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      ) : null}\r\n                    </Form.Item>\r\n                  ))}\r\n                  {fields.length < 2 ? (\r\n                    <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        style={{ width: \"60%\" }}\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add Category\r\n                      </Button>\r\n                      <Form.ErrorList errors={errors} />\r\n                    </Form.Item>\r\n                  ) : null}\r\n                </>\r\n              )}\r\n            </Form.List>\r\n\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\nexport default EditPost;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\view-post.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\posts.js",["190","191"],"import React, { useState, useEffect } from \"react\";\r\nimport { PostGrid } from \"../components/common\";\r\nimport axiosInstance from \"../axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport jwt_decode from \"jwt-decode\";\r\nvar authenticatedUser = 0;\r\n//const { Search } = Input;\r\n\r\nconst Post = () => {\r\n  let history = useHistory();\r\n  const [searchPosts, setSearchPosts] = useState([]);\r\n  console.log(window.location.search);\r\n  var token = localStorage.getItem(\"access_token\");\r\n  if (token) {\r\n    var decoded_token = jwt_decode(token);\r\n    console.log(\"decoded-token\" + decoded_token.user_id);\r\n    const userId = decoded_token.user_id;\r\n    authenticatedUser = userId;\r\n  } else {\r\n    authenticatedUser = false;\r\n  }\r\n  console.log(authenticatedUser);\r\n\r\n  useEffect(() => {\r\n    axiosInstance.get(\"search/\" + window.location.search).then((res) => {\r\n      const allPosts = res.data;\r\n      console.log(\"Search Posts\");\r\n      console.log(res.data);\r\n      setSearchPosts(allPosts);\r\n    });\r\n  }, [window.location.search]);\r\n  return (\r\n    <main className=\"home\">\r\n      {searchPosts.length > 0 ? (\r\n        <section className=\"bg-white\">\r\n          <section className=\"container\">\r\n            <div className=\"row\">\r\n              {searchPosts.length > 1 && <h2>Related Posts</h2>}\r\n              <PostGrid\r\n                posts={searchPosts}\r\n                isAuthenticated={authenticatedUser}\r\n              />\r\n            </div>\r\n          </section>\r\n        </section>\r\n      ) : (\r\n        <section className=\"bg-white\">\r\n          <section className=\"container\">\r\n            <div className=\"row\">\r\n              <h2>No Matching Posts Found</h2>\r\n            </div>\r\n          </section>\r\n        </section>\r\n      )}\r\n    </main>\r\n  );\r\n};\r\nexport default Post;\r\n","C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\CheckAuthentication.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\components\\common\\checkAuthentication.js",[],["192","193"],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\filteredPosts.js",[],"C:\\Users\\prakash472\\Desktop\\frontend\\src\\pages\\users\\create-post copy.js",["194","195","196","197","198","199","200","201","202","203","204","205"],"import { Form, Input, InputNumber, Button, DatePicker, Select } from \"antd\";\r\nimport { MinusCircleOutlined, PlusOutlined } from \"@ant-design/icons\";\r\nimport { useState, useEffect } from \"react\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport axiosInstance from \"../../axios\";\r\nconst userId = 1;\r\nconst layout = {\r\n  labelCol: {\r\n    span: 8,\r\n  },\r\n  wrapperCol: {\r\n    span: 16,\r\n  },\r\n};\r\nconst validateMessages = {\r\n  required: \"${label} is required!\",\r\n  types: {\r\n    email: \"${label} is not a valid email!\",\r\n    number: \"${label} is not a valid number!\",\r\n  },\r\n  number: {\r\n    range: \"${label} must be between ${min} and ${max}\",\r\n  },\r\n};\r\n\r\nconst CreatePost = () => {\r\n  const [totalCategory, setTotalCategory] = useState({});\r\n  const history = useHistory();\r\n  useEffect(() => {\r\n    axiosInstance.get(\"categories/\").then((res) => {\r\n      setTotalCategory(res.data);\r\n    });\r\n  }, []);\r\n\r\n  function slugify(string) {\r\n    const a =\r\n      \"àáâäæãåāăąçćčđďèéêëēėęěğǵḧîïíīįìłḿñńǹňôöòóœøōõőṕŕřßśšşșťțûüùúūǘůűųẃẍÿýžźż·/_,:;\";\r\n    const b =\r\n      \"aaaaaaaaaacccddeeeeeeeegghiiiiiilmnnnnoooooooooprrsssssttuuuuuuuuuwxyyzzz------\";\r\n    const p = new RegExp(a.split(\"\").join(\"|\"), \"g\");\r\n\r\n    return string\r\n      .toString()\r\n      .toLowerCase()\r\n      .replace(/\\s+/g, \"-\") // Replace spaces with -\r\n      .replace(p, (c) => b.charAt(a.indexOf(c))) // Replace special characters\r\n      .replace(/&/g, \"-and-\") // Replace & with 'and'\r\n      .replace(/[^\\w\\-]+/g, \"\") // Remove all non-word characters\r\n      .replace(/\\-\\-+/g, \"-\") // Replace multiple - with single -\r\n      .replace(/^-+/, \"\") // Trim - from start of text\r\n      .replace(/-+$/, \"\"); // Trim - from end of text\r\n  }\r\n\r\n  const ids = [1, 2, 3];\r\n  const [addCategory, setaddCategory] = useState(false);\r\n  const reviewURL = \"http://127.0.0.1:5000/predict_review\";\r\n  var analysedreview = {};\r\n  const handleSubmit = (values) => {\r\n    const initialTitle = values.title.trim();\r\n    const slugifyTitle = slugify(initialTitle);\r\n    axiosInstance.post(reviewURL, { review: values.content }).then((res) => {\r\n      analysedreview = res.data;\r\n      console.log(analysedreview);\r\n    });\r\n    values.slug = slugifyTitle;\r\n    values.author = userId;\r\n    if (values.date_posted === null) {\r\n      values.date_posted = \"\";\r\n    }\r\n    axiosInstance\r\n      .post(\"customuser/create/\", {\r\n        title: values.title,\r\n        content: values.content,\r\n        excerpt: values.excerpt,\r\n        slug: values.slug,\r\n        review_positive: analysedreview.predictions[0],\r\n        image: values.image,\r\n        author: values.author,\r\n        categories: values.categories,\r\n      })\r\n      .then((res) => {\r\n        console.log(\"Inside post request\");\r\n        console.log(res);\r\n        //  history.push(\"/home/\");\r\n      });\r\n    console.log(\"After\");\r\n    console.log(values);\r\n  };\r\n  const add = () => {\r\n    setaddCategory(true);\r\n  };\r\n\r\n  return (\r\n    <main className=\"home\">\r\n      <section className=\"container\">\r\n        <div\r\n          className=\"row\"\r\n          style={{\r\n            paddingTop: \"10px\",\r\n          }}\r\n        >\r\n          <h2>Create Post</h2>\r\n          <Form\r\n            {...layout}\r\n            name=\"nest-messages\"\r\n            onFinish={handleSubmit}\r\n            validateMessages={validateMessages}\r\n            initialValues={{\r\n              title: \"\",\r\n              content: \"\",\r\n              date_posted: \"\",\r\n              excerpt: \"\",\r\n              slug: \"\",\r\n              review_positive: null,\r\n              image: \"\",\r\n              author: null,\r\n            }}\r\n          >\r\n            <Form.Item\r\n              name={[\"title\"]}\r\n              label=\"Title\"\r\n              rules={[\r\n                {\r\n                  // required: true,\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name={[\"excerpt\"]}\r\n              label=\"Excerpt\"\r\n              rules={[\r\n                {\r\n                  // type: \"email\",\r\n                },\r\n              ]}\r\n            >\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name={[\"date_posted\"]} label=\"Date\">\r\n              <DatePicker />\r\n            </Form.Item>\r\n            <Form.Item\r\n              hidden\r\n              name={[\"review_positive\"]}\r\n              label=\"Review_Positive\"\r\n              rules={[\r\n                {\r\n                  type: \"number\",\r\n                },\r\n              ]}\r\n            >\r\n              <InputNumber disabled />\r\n            </Form.Item>\r\n            <Form.Item name={[\"image\"]} label=\"Post Image\">\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name={[\"slug\"]} label=\"Slug\" hidden>\r\n              <Input />\r\n            </Form.Item>\r\n            <Form.Item name={[\"author\"]} label=\"Author\" hidden>\r\n              <Input disabled />\r\n            </Form.Item>\r\n            <Form.Item name={[\"content\"]} label=\"Content\">\r\n              <Input.TextArea />\r\n            </Form.Item>\r\n            <Form.List\r\n              name=\"categories\"\r\n              rules={[\r\n                {\r\n                  validator: async (_, names) => {\r\n                    if (!names || names.length < 1) {\r\n                      return Promise.reject(\r\n                        new Error(\"At least 1 category needed\")\r\n                      );\r\n                    }\r\n                  },\r\n                },\r\n              ]}\r\n            >\r\n              {(fields, { add, remove }, { errors }) => (\r\n                <>\r\n                  {fields.map((field, index) => (\r\n                    <Form.Item\r\n                      label=\"Categories\"\r\n                      required={false}\r\n                      key={field.key}\r\n                    >\r\n                      <Form.Item\r\n                        wrapperCol={{ ...layout.wrapperCol }}\r\n                        {...field}\r\n                        validateTrigger={[\"onChange\", \"onBlur\"]}\r\n                        noStyle\r\n                      >\r\n                        <Select>\r\n                          {totalCategory.map((category) => {\r\n                            return (\r\n                              <Select.Option value={category.id}>\r\n                                {category.name}\r\n                              </Select.Option>\r\n                            );\r\n                          })}\r\n                        </Select>\r\n                      </Form.Item>\r\n                      {fields.length > 1 ? (\r\n                        <MinusCircleOutlined\r\n                          className=\"dynamic-delete-button\"\r\n                          onClick={() => remove(field.name)}\r\n                        />\r\n                      ) : null}\r\n                    </Form.Item>\r\n                  ))}\r\n                  {fields.length < 2 ? (\r\n                    <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n                      <Button\r\n                        type=\"dashed\"\r\n                        onClick={() => add()}\r\n                        style={{ width: \"60%\" }}\r\n                        icon={<PlusOutlined />}\r\n                      >\r\n                        Add Category\r\n                      </Button>\r\n                      <Form.ErrorList errors={errors} />\r\n                    </Form.Item>\r\n                  ) : null}\r\n                </>\r\n              )}\r\n            </Form.List>\r\n            <Form.Item wrapperCol={{ ...layout.wrapperCol, offset: 8 }}>\r\n              <Button type=\"primary\" htmlType=\"submit\">\r\n                Submit\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </div>\r\n      </section>\r\n    </main>\r\n  );\r\n};\r\nexport default CreatePost;\r\n",{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":2,"column":8,"nodeType":"212","messageId":"213","endLine":2,"endColumn":16},{"ruleId":"210","severity":1,"message":"214","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":16},{"ruleId":"210","severity":1,"message":"215","line":4,"column":10,"nodeType":"212","messageId":"213","endLine":4,"endColumn":22},{"ruleId":"210","severity":1,"message":"216","line":4,"column":24,"nodeType":"212","messageId":"213","endLine":4,"endColumn":36},{"ruleId":"210","severity":1,"message":"217","line":5,"column":10,"nodeType":"212","messageId":"213","endLine":5,"endColumn":15},{"ruleId":"210","severity":1,"message":"218","line":6,"column":10,"nodeType":"212","messageId":"213","endLine":6,"endColumn":23},{"ruleId":"210","severity":1,"message":"219","line":12,"column":7,"nodeType":"212","messageId":"213","endLine":12,"endColumn":14},{"ruleId":"220","severity":1,"message":"221","line":23,"column":6,"nodeType":"222","endLine":23,"endColumn":30,"suggestions":"223"},{"ruleId":"210","severity":1,"message":"219","line":11,"column":7,"nodeType":"212","messageId":"213","endLine":11,"endColumn":14},{"ruleId":"220","severity":1,"message":"224","line":21,"column":6,"nodeType":"222","endLine":21,"endColumn":8,"suggestions":"225"},{"ruleId":"210","severity":1,"message":"226","line":2,"column":10,"nodeType":"212","messageId":"213","endLine":2,"endColumn":17},{"ruleId":"206","replacedBy":"227"},{"ruleId":"208","replacedBy":"228"},{"ruleId":"229","severity":1,"message":"230","line":93,"column":15,"nodeType":"231","endLine":93,"endColumn":57},{"ruleId":"229","severity":1,"message":"230","line":78,"column":15,"nodeType":"231","endLine":78,"endColumn":57},{"ruleId":"210","severity":1,"message":"232","line":8,"column":11,"nodeType":"212","messageId":"213","endLine":8,"endColumn":19},{"ruleId":"220","severity":1,"message":"233","line":15,"column":6,"nodeType":"222","endLine":15,"endColumn":8,"suggestions":"234"},{"ruleId":"210","severity":1,"message":"235","line":4,"column":10,"nodeType":"212","messageId":"213","endLine":4,"endColumn":20},{"ruleId":"210","severity":1,"message":"236","line":5,"column":10,"nodeType":"212","messageId":"213","endLine":5,"endColumn":14},{"ruleId":"210","severity":1,"message":"237","line":6,"column":8,"nodeType":"212","messageId":"213","endLine":6,"endColumn":21},{"ruleId":"210","severity":1,"message":"238","line":10,"column":7,"nodeType":"212","messageId":"213","endLine":10,"endColumn":13},{"ruleId":"210","severity":1,"message":"239","line":8,"column":3,"nodeType":"212","messageId":"213","endLine":8,"endColumn":9},{"ruleId":"210","severity":1,"message":"240","line":12,"column":3,"nodeType":"212","messageId":"213","endLine":12,"endColumn":17},{"ruleId":"210","severity":1,"message":"241","line":28,"column":7,"nodeType":"212","messageId":"213","endLine":28,"endColumn":15},{"ruleId":"242","severity":1,"message":"243","line":38,"column":13,"nodeType":"244","messageId":"245","endLine":38,"endColumn":36},{"ruleId":"242","severity":1,"message":"243","line":40,"column":12,"nodeType":"244","messageId":"245","endLine":40,"endColumn":44},{"ruleId":"242","severity":1,"message":"243","line":41,"column":13,"nodeType":"244","messageId":"245","endLine":41,"endColumn":46},{"ruleId":"242","severity":1,"message":"243","line":44,"column":12,"nodeType":"244","messageId":"245","endLine":44,"endColumn":56},{"ruleId":"210","severity":1,"message":"219","line":64,"column":9,"nodeType":"212","messageId":"213","endLine":64,"endColumn":16},{"ruleId":"246","severity":1,"message":"247","line":84,"column":21,"nodeType":"244","messageId":"248","endLine":84,"endColumn":22,"suggestions":"249"},{"ruleId":"246","severity":1,"message":"247","line":85,"column":17,"nodeType":"244","messageId":"248","endLine":85,"endColumn":18,"suggestions":"250"},{"ruleId":"246","severity":1,"message":"247","line":85,"column":19,"nodeType":"244","messageId":"248","endLine":85,"endColumn":20,"suggestions":"251"},{"ruleId":"210","severity":1,"message":"252","line":90,"column":9,"nodeType":"212","messageId":"213","endLine":90,"endColumn":12},{"ruleId":"210","severity":1,"message":"253","line":91,"column":10,"nodeType":"212","messageId":"213","endLine":91,"endColumn":21},{"ruleId":"254","severity":1,"message":"255","line":103,"column":25,"nodeType":"256","messageId":"257","endLine":103,"endColumn":27},{"ruleId":"210","severity":1,"message":"258","line":145,"column":9,"nodeType":"212","messageId":"213","endLine":145,"endColumn":12},{"ruleId":"210","severity":1,"message":"219","line":7,"column":9,"nodeType":"212","messageId":"213","endLine":7,"endColumn":16},{"ruleId":"210","severity":1,"message":"259","line":1,"column":44,"nodeType":"212","messageId":"213","endLine":1,"endColumn":54},{"ruleId":"242","severity":1,"message":"243","line":32,"column":13,"nodeType":"244","messageId":"245","endLine":32,"endColumn":36},{"ruleId":"242","severity":1,"message":"243","line":34,"column":12,"nodeType":"244","messageId":"245","endLine":34,"endColumn":44},{"ruleId":"242","severity":1,"message":"243","line":35,"column":13,"nodeType":"244","messageId":"245","endLine":35,"endColumn":46},{"ruleId":"242","severity":1,"message":"243","line":38,"column":12,"nodeType":"244","messageId":"245","endLine":38,"endColumn":56},{"ruleId":"210","severity":1,"message":"219","line":44,"column":9,"nodeType":"212","messageId":"213","endLine":44,"endColumn":16},{"ruleId":"260","severity":1,"message":"261","line":56,"column":37,"nodeType":"262","messageId":"263","endLine":56,"endColumn":39},{"ruleId":"210","severity":1,"message":"264","line":57,"column":21,"nodeType":"212","messageId":"213","endLine":57,"endColumn":25},{"ruleId":"220","severity":1,"message":"265","line":58,"column":23,"nodeType":"266","endLine":58,"endColumn":45},{"ruleId":"246","severity":1,"message":"247","line":87,"column":21,"nodeType":"244","messageId":"248","endLine":87,"endColumn":22,"suggestions":"267"},{"ruleId":"246","severity":1,"message":"247","line":88,"column":17,"nodeType":"244","messageId":"248","endLine":88,"endColumn":18,"suggestions":"268"},{"ruleId":"246","severity":1,"message":"247","line":88,"column":19,"nodeType":"244","messageId":"248","endLine":88,"endColumn":20,"suggestions":"269"},{"ruleId":"210","severity":1,"message":"252","line":93,"column":9,"nodeType":"212","messageId":"213","endLine":93,"endColumn":12},{"ruleId":"254","severity":1,"message":"255","line":104,"column":25,"nodeType":"256","messageId":"257","endLine":104,"endColumn":27},{"ruleId":"270","severity":1,"message":"271","line":202,"column":15,"nodeType":"231","endLine":205,"endColumn":16},{"ruleId":"210","severity":1,"message":"219","line":10,"column":7,"nodeType":"212","messageId":"213","endLine":10,"endColumn":14},{"ruleId":"220","severity":1,"message":"221","line":31,"column":6,"nodeType":"222","endLine":31,"endColumn":30,"suggestions":"272"},{"ruleId":"206","replacedBy":"273"},{"ruleId":"208","replacedBy":"274"},{"ruleId":"210","severity":1,"message":"275","line":4,"column":8,"nodeType":"212","messageId":"213","endLine":4,"endColumn":18},{"ruleId":"242","severity":1,"message":"243","line":17,"column":13,"nodeType":"244","messageId":"245","endLine":17,"endColumn":36},{"ruleId":"242","severity":1,"message":"243","line":19,"column":12,"nodeType":"244","messageId":"245","endLine":19,"endColumn":44},{"ruleId":"242","severity":1,"message":"243","line":20,"column":13,"nodeType":"244","messageId":"245","endLine":20,"endColumn":46},{"ruleId":"242","severity":1,"message":"243","line":23,"column":12,"nodeType":"244","messageId":"245","endLine":23,"endColumn":56},{"ruleId":"210","severity":1,"message":"219","line":29,"column":9,"nodeType":"212","messageId":"213","endLine":29,"endColumn":16},{"ruleId":"246","severity":1,"message":"247","line":49,"column":21,"nodeType":"244","messageId":"248","endLine":49,"endColumn":22,"suggestions":"276"},{"ruleId":"246","severity":1,"message":"247","line":50,"column":17,"nodeType":"244","messageId":"248","endLine":50,"endColumn":18,"suggestions":"277"},{"ruleId":"246","severity":1,"message":"247","line":50,"column":19,"nodeType":"244","messageId":"248","endLine":50,"endColumn":20,"suggestions":"278"},{"ruleId":"210","severity":1,"message":"252","line":55,"column":9,"nodeType":"212","messageId":"213","endLine":55,"endColumn":12},{"ruleId":"210","severity":1,"message":"253","line":56,"column":10,"nodeType":"212","messageId":"213","endLine":56,"endColumn":21},{"ruleId":"210","severity":1,"message":"258","line":90,"column":9,"nodeType":"212","messageId":"213","endLine":90,"endColumn":12},"no-native-reassign",["279"],"no-negated-in-lhs",["280"],"no-unused-vars","'trending' is defined but never used.","Identifier","unusedVar","'featured' is defined but never used.","'MasonaryPost' is defined but never used.","'PostMasonary' is defined but never used.","'Input' is defined but never used.","'AudioOutlined' is defined but never used.","'history' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'window.location.search'. Either exclude it or remove the dependency array. Outer scope values like 'window.location.search' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["281"],"React Hook useEffect has a missing dependency: 'filteredPosts'. Either include it or remove the dependency array.",["282"],"'Content' is defined but never used.",["279"],["280"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'response' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["283"],"'useHistory' is defined but never used.","'Link' is defined but never used.","'axiosInstance' is defined but never used.","'suffix' is assigned a value but never used.","'Upload' is defined but never used.","'UploadOutlined' is defined but never used.","'normFile' is assigned a value but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-useless-escape","Unnecessary escape character: \\-.","unnecessaryEscape",["284","285"],["286","287"],["288","289"],"'ids' is assigned a value but never used.","'addCategory' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'add' is assigned a value but never used.","'DatePicker' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'name' is assigned a value but never used.","Assignments to the 'newCategory' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression",["290","291"],["292","293"],["294","295"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["296"],["279"],["280"],"'jwt_decode' is defined but never used.",["297","298"],["299","300"],["301","302"],"no-global-assign","no-unsafe-negation",{"desc":"303","fix":"304"},{"desc":"305","fix":"306"},{"desc":"307","fix":"308"},{"messageId":"309","fix":"310","desc":"311"},{"messageId":"312","fix":"313","desc":"314"},{"messageId":"309","fix":"315","desc":"311"},{"messageId":"312","fix":"316","desc":"314"},{"messageId":"309","fix":"317","desc":"311"},{"messageId":"312","fix":"318","desc":"314"},{"messageId":"309","fix":"319","desc":"311"},{"messageId":"312","fix":"320","desc":"314"},{"messageId":"309","fix":"321","desc":"311"},{"messageId":"312","fix":"322","desc":"314"},{"messageId":"309","fix":"323","desc":"311"},{"messageId":"312","fix":"324","desc":"314"},{"desc":"303","fix":"325"},{"messageId":"309","fix":"326","desc":"311"},{"messageId":"312","fix":"327","desc":"314"},{"messageId":"309","fix":"328","desc":"311"},{"messageId":"312","fix":"329","desc":"314"},{"messageId":"309","fix":"330","desc":"311"},{"messageId":"312","fix":"331","desc":"314"},"Update the dependencies array to be: []",{"range":"332","text":"333"},"Update the dependencies array to be: [filteredPosts]",{"range":"334","text":"335"},"Update the dependencies array to be: [history]",{"range":"336","text":"337"},"removeEscape",{"range":"338","text":"339"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"340","text":"341"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"342","text":"339"},{"range":"343","text":"341"},{"range":"344","text":"339"},{"range":"345","text":"341"},{"range":"346","text":"339"},{"range":"347","text":"341"},{"range":"348","text":"339"},{"range":"349","text":"341"},{"range":"350","text":"339"},{"range":"351","text":"341"},{"range":"352","text":"333"},{"range":"353","text":"339"},{"range":"354","text":"341"},{"range":"355","text":"339"},{"range":"356","text":"341"},{"range":"357","text":"339"},{"range":"358","text":"341"},[856,880],"[]",[912,914],"[filteredPosts]",[537,539],"[history]",[2128,2129],"",[2128,2128],"\\",[2191,2192],[2191,2191],[2193,2194],[2193,2193],[2854,2855],[2854,2854],[2917,2918],[2917,2917],[2919,2920],[2919,2919],[1012,1036],[1517,1518],[1517,1517],[1580,1581],[1580,1580],[1582,1583],[1582,1582]]